# coding=utf-8
import pygame
from config import *
from movable import *
class Maze():
    def __init__(self,width,height,mazeNo):
        self.width = width
        self.height = height
        self.maze_map = [[0 for x in range(width)] for x in range(height)]
        self.ports = [[[0,0] for x in range(2)] for x in range(10)]
        self.positions = list()
        self.initMaze(mazeNo)

    def initMaze(self,mazeNo):
       """

       inicializuje bludiště pomocí čísla mapy z příslušného souboru

       """
       try:
           maze_file = open('./maps/map_'+str(mazeNo),'r')
           while maze_file.readline().strip() != '@':
               continue
           for i in range(len(self.maze_map)):
               for j in range(len(self.maze_map[i])):
                   self.maze_map[i][j] = maze_file.read(1)
                   if (ord(self.maze_map[i][j]) >= 49) and (ord(self.maze_map[i][j]) <= 57):
                       index = int(self.maze_map[i][j])
                       value = self.ports[index][0]
                       if value == [0,0]:
                           self.ports[index][0] = [i,j]
                       else:
                           self.ports[index][1] = [i,j]
                   if(self.maze_map[i][j] == '^'):
                        self.positions.append([i,j])
               maze_file.read(1)
           maze_file.close()
       except Exception:
           print 'Error opening file "map_' + str(mazeNo) + '"'

    def IsAbleToGo(self,movable):
        return True

class Menu:
    def __init__(self,list):
        self.list = list
        self.active = 0

    def up(self):
        if self.active -1 >= 0:
            self.active -= 1

    def down(self):
        if self.active +1 < len(self.list):
            self.active += 1

    def getName(self,screen,name):
        done = False
        while not done:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    done = True
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_RETURN:
                        done = True
                    elif event.key == pygame.K_BACKSPACE:
                        if len(name) > 0:
                            name = name[:-1]
                    else:
                        try:
                            name += chr(event.key)
                        except:
                            print 'Only lowercase, please'
            rect = pygame.Surface((201,251))
            rect.fill(black)
            label_font = pygame.font.SysFont('purisa', 20)
            label = label_font.render(name+'|', 1, pale)
            rect.blit(label,(25,10))
            screen.blit(rect,(550,150))
            pygame.display.flip()
        return name

    def doAction(self,game):
        action = self.list[self.active]
        return action


    def show(self,screen,names,count):
        rect = pygame.Surface((201,251))
        rect.fill(black)
        label_font = pygame.font.SysFont('purisa', 20)
        for i in range(len(self.list)):
            if self.active == i:
                label = label_font.render(self.list[i], 1, pale)
            else:
                label = label_font.render(self.list[i], 1, red)
            rect.blit(label,(25,10 + i*35))
        pygame.draw.rect(rect,blue,[0,0,200,250],2)
        screen.blit(rect,(550,150))
        rect = pygame.Surface((301,251))
        rect.fill(black)
        label_font = pygame.font.SysFont('purisa', 20)
        keys = ['arrows','wasd','ijkl','NUM_8456']
        if count > 0:
            for i in range(count):
                label = label_font.render(names[i]+' ('+keys[i]+')', 1, pale)
                rect.blit(label,(25,10 + i*35))
            screen.blit(rect,(750,150))

class Game():
    def __init__(self):
        self.maze_no = 1
        self.colors = list()
        self.color_count = 0
        self.pac_list = list()
        self.static_list = ['','','','']
        self.monster_list = list()
        self.menu = Menu(['Return','New game','Choose a map','Add player','Remove player','Rename players','Quit'])
        self.done = False


    def move(self,screen):
        for pac in self.pac_list:
            pac.move(screen)
        for monster in self.monster_list:
            monster.move(screen)
        if len(self.pac_list) > 1:
            for p in range(len(self.pac_list)-1):
                for i in range(len(self.pac_list)-1):
                    if self.pac_list[i].score < self.pac_list[i+1].score:
                        x = self.pac_list[i]
                        self.pac_list[i] = self.pac_list[i+1]
                        self.pac_list[i+1] = x
            for p in self.pac_list:
                if p.boss == 0:
                    p.ring = False
            self.pac_list[0].ring = True
            if self.pac_list[0].boss == 0:
                self.pac_list[0].color = bright_red
            self.pac_list[1].ring =  True
            if self.pac_list[1].boss == 0:
                self.pac_list[1].color = bright_green
    def setMazeNo(self,no,monst_list):
        self.maze_no = no
        maze_file = open('./maps/map_'+str(no),'r')
        width = int(maze_file.readline())
        height = int(maze_file.readline())
        line = maze_file.readline().strip()
        i = 0
        while line != '@' :
               eval('self.colors.append(' + line + ')')
               i +=1
               self.color_count += 1
               line = maze_file.readline().strip()
        self.maze = Maze(width,height,no)
        monster_img_list = list()
        monster_img_list.append(ImageStorage(['purple_up.png','purple2_up.png'],['purple_right.png','purple2_right.png'],['purple_down.png','purple2_down.png'],['purple_left.png','purple2_left.png']))
        monster_img_list.append(ImageStorage(['orange_up.png','orange2_up.png'],['orange_right.png','orange2_right.png'],['orange_down.png','orange2_down.png'],['orange_left.png','orange2_left.png']))
        monster_img_list.append(ImageStorage(['pink_up.png','pink2_up.png'],['pink_right.png','pink2_right.png'],['pink_down.png','pink2_down.png'],['pink_left.png','pink2_left.png']))
        #monster_img_list.append(ImageStorage(['virus_up.png','virus_up2.png'],['virus_down.png','virus_down2.png'],['virus_right.png','virus_right2.png'],['virus_left.png','virus_left2.png']))
        monster_img_list.append(ImageStorage(['cyan_up.png','cyan2_up.png'],['cyan_right.png','cyan2_right.png'],['cyan_down.png','cyan2_down.png'],['cyan_left.png','cyan2_left.png']))
        for p in self.maze.positions:
            r = random.randrange(0,4)
            pos = self.compute_position(p)
            monster = Monster([1,0],1,monster_img_list[r],delta_monster,'Monster',pos,self,p[1],p[0],speed_monster)
            #pac = Monster([speed_monster,0],1,ImageStorage(['pac1_up.png','pac2_up.png','pac3_up.png'],['pac1_right.png','pac2_right.png','pac3_right.png'],['pac1_down.png','pac2_down.png','pac3_down.png'],['pac1_left.png','pac2_left.png','pac3_left.png'],),delta_monster,'Pacman',pos,self,p[1],p[0])
            self.monster_list.append(monster)
            monst_list.add(monster)

    def showMenu(self,screen,count,names):
        self.menu.show(screen,count,names)

    def draw(self,screen,count):
        """
        Vykreslí bludiště pomocí objektu třídy Maze
        """
        y=57
        x=135
        for i in range(len(self.maze.maze_map)):
            for j in range(len(self.maze.maze_map[i])):
                if (j < len(self.maze.maze_map[i])-1) and (self.maze.maze_map[i][j] == '*') and (self.maze.maze_map[i][j+1] == '*'):
                    pygame.draw.line(screen,self.colors[0],(x+4,y+3),(x+15,y+3),2)
                    #pygame.draw.aaline(screen,blue,(x+4,y+6),(x+15,y+6),2)
                if (i < len(self.maze.maze_map)-1) and (self.maze.maze_map[i][j] == '*') and (self.maze.maze_map[i+1][j] == '*'):
                    pygame.draw.line(screen,self.colors[0],(x+4,y+4),(x+4,y+14),2)

                elif (ord(self.maze.maze_map[i][j]) >= 49) and (ord(self.maze.maze_map[i][j]) <= 57):
                    pygame.draw.ellipse(screen,self.colors[int(self.maze.maze_map[i][j])],[x,y-6,10,18],1)
                elif self.maze.maze_map[i][j] == '_':
                    pygame.draw.circle(screen,pale,[x+5,y+5],1,1)
                elif self.maze.maze_map[i][j] == '-':
                    pygame.draw.circle(screen,red,[x+5,y+5],2,1)
                elif self.maze.maze_map[i][j] == '/':
                    pygame.draw.circle(screen,yellow,[x+5,y+5],4,3)
                x+= 10
            y += 10
            x = 135
        label_font = pygame.font.SysFont("purisa", 20)
        score_font = pygame.font.SysFont("monospace", 20)
        wasd = pygame.image.load('./images/wasd.png').convert()
        ijkl = pygame.image.load('./images/ijkl.png').convert()
        arrows = pygame.image.load('./images/arrows.png').convert()
        num = pygame.image.load('./images/8456.png').convert()
        if count > 0:
            label = label_font.render(self.static_list[0], 1, yellow)
            screen.blit(label, (5,140))
            screen.blit(arrows,(5,70))
        if count > 1:
            label = label_font.render(self.static_list[1], 1, yellow)
            screen.blit(label, (5,640))
            screen.blit(wasd,(5,570))
        if count > 2:
            label = label_font.render(self.static_list[2], 1, yellow)
            screen.blit(label, (950,140))
            screen.blit(ijkl,(950,70))
        if count > 3:
            label = label_font.render(self.static_list[3], 1, yellow)
            screen.blit(label, (950,640))
            screen.blit(num,(950,570))
        label = score_font.render('Pause F9', 1, red)
        screen.blit(label, (5,10))
        label = score_font.render('Menu F10', 1, red)
        screen.blit(label, (120,10))
        label = score_font.render('Fullscreen F11', 1, red)
        screen.blit(label, (240,10))
        label = score_font.render('Restart F5', 1, red)
        screen.blit(label, (435,10))
        y_delta = 0
        for pac in self.pac_list:
            label = label_font.render(pac.name, 1, (255,255,0))
            screen.blit(label, (1180, 100 + y_delta))
            score = score_font.render(str(pac.score) + ' :' +str(pac.boss),1,(255,180,0))
            screen.blit(score, (1180, 130 + y_delta))
            y_delta += 80
    def compute_position(self,pos):
        x = 10 * pos[1] + 132
        y = 10 * pos[0] + 52
        return [x,y]